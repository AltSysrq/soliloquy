CUSTOMISING AND EXTENDING SOLILOQUY
===================================
Language Information
--------------------
Soliloquy is written in what is essentially C99, but is extended somewhat to
give C some Lisp-like features. This is done by both the preprocessor and an
external tool (run automatically). Due to the complex and dynamic nature of the
provided programming facilities, automatic garbage collection is uesd. See
common.h.

All implementation files *must* begin with
----------------
  #include "foo.slc"
----------------
where "foo" is the base name of the file. The .slc file contains auto-generated
implementations of language extensions and declarations for
symbols. Additionally, it includes the header for your implementation (if there
is one), <config.h> if appropriate, as well as "common.h".

The first extension of note are symbols. Symbols, which are only valid in
implementation files (*.c), look like undeclared variables beginning with
one or two `$'s, followed by a name using Hungarian notation.

A symbol may be either private (one $) or public (two $s). Private symbols are
unique to each compilation unit, whereas public symbols are shared across all.
The letters of a symbol's name between the dollars and the first underscore
identify its type. Supported types are (* = non-first-class):
  i     integer (type signed or unsigned)
  s     string (type const char*)
  h     hook point (undefined type)
  f*    function to call the corresponding hook (type void (void))
  lT    list of type T (may be multidimenional) (type list_T)
  aT    dynamic array of type T (type dynar_T)
  u*    unique identifier (a pointer to itself, simply to indicate identity)
  v     reference to unique identifier (type identity)
  p     untyped pointer (type void*)
  d*    symbol domain (discussed below) (typeless)
  o     object (type object)

Besides simply being implicit global variables, symbols form the basis of
Soliloquy's "eviscerated object" system. Any first-class symbol may be
_implanted_ into an object. Implantation makes the value stored in the symbol
dependant on the current context; when an object a symbol is implanted in is
activated ("eviscerated"), the symbols value is changed to that stored in the
object; correspondingly, when the object is deactivated ("re-emboweled"), the
old value of the symbol is restored.

